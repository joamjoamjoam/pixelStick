import socket
import sys
import thread
import time
import pickle
#import RPi.GPIO as GPIO

imageMatrix = []
secondsToDisplayImage = 1.5

def serverFunctionalCode(connection, client_address):
    global imageMatrix, secondsToDisplayImage
    while True:
        #get mode from client (option on menu picked)
        print >> sys.stderr, 'Waiting on Mode Select from ', client_address
        mode = connection.recv(4096)
        #print 'Mode = %s' % mode

        if (mode == '1'):
            #load image
            sizeExpected = int(connection.recv(4096))
            connection.sendto("Continue",client_address)
            imageName = connection.recv(4096)
            connection.sendto("Continue",client_address)
            width = int(connection.recv(4096))
            connection.sendto("Continue",client_address)
            height = int(connection.recv(4096))
            connection.sendto("Continue",client_address)
            print 'Expeced %s bytes from %s' % (sizeExpected, client_address)
            print 'int is %d' % int(sizeExpected)
            stringRecieved = ''
            while sys.getsizeof(stringRecieved) < sizeExpected:
                print 'begin size is: %d' % sys.getsizeof(stringRecieved)
                stringRecieved += connection.recv(4096)
                print 'end size is %d' % sys.getsizeof(stringRecieved)

            imageMatrix = pickle.loads(stringRecieved)
            pickleFileName = imageName + ".pickle"
            pickleFile = open(pickleFileName,"w")
            pickle.dump(imageMatrix,pickleFile)
            pickleFile.close()







        elif(mode == '2'):
            # display image
            imageName = connection.recv(4096)
            pickleFileName = imageName + ".pickle"
            pickleFile = open(pickleFileName,"r")
            diplayImage = pickle.load(pickleFile)

            # Then it's a trivial matter of writing each column to the SPI port.
            print "Displaying %s ... with width %d and height %d" % (imageName,width,height)
            for x in range(width):
                #spidev.write(column[x])
                sleepTime = float(secondsToDisplayImage)/float(width)
                time.sleep(sleepTime)
                #spidev.flush()
            time.sleep(0.5)
            connection.sendto("Done",client_address)
        elif(mode == '3'):
            # RECIEVE SECONDS TO DISPLAY IMAGE
            secondsToDisplayImage = int(connection.recv(4096))
            connection.sendto("Continue", client_address)
            print 'Display Seconds changed to %d seconds from ' % secondsToDisplayImage, client_address

        elif(mode == '4'):
            print 'Logout Recieved from ', client_address
            connection.close()
            return 0

        else:
            print >> sys.stderr, 'Invalid choice must be 1, 2, or 3'

    return


def serverInput():
    global clientArray



    while(True):
        #accepts input on server side for admin
        tmp=0


    return 0


if __name__=='__main__':
    # Create a TCP/IP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

    # Bind the socket to the port
    server_address = ('localhost', 7908)
    print >>sys.stderr, 'starting up on %s port %s' % server_address
    sock.bind(server_address)

    # Listen for incoming connections
    sock.listen(1)
    sock.setblocking(True)
    thread.start_new_thread(serverInput, ())
    while 1:
        print 'waiting for connection...'
        connection, client_address = sock.accept()
        print '...connected from:', client_address
        thread.start_new_thread(serverFunctionalCode, (connection, client_address))